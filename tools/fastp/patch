diff --git a/src/peprocessor.cpp b/src/peprocessor.cpp
index 44443ea..1276430 100644
--- a/src/peprocessor.cpp
+++ b/src/peprocessor.cpp
@@ -111,59 +111,68 @@ bool PairEndProcessor::process(){
         initOutput();
 
     initPackRepository();
-    std::thread producer(std::bind(&PairEndProcessor::producerTask, this));
+    // std::thread producer(std::bind(&PairEndProcessor::producerTask, this));
+    PairEndProcessor::producerTask();
 
     //TODO: get the correct cycles
     int cycle = 151;
+    mOptions->thread = 1;
     ThreadConfig** configs = new ThreadConfig*[mOptions->thread];
     for(int t=0; t<mOptions->thread; t++){
         configs[t] = new ThreadConfig(mOptions, t, true);
         initConfig(configs[t]);
     }
 
-    std::thread** threads = new thread*[mOptions->thread];
-    for(int t=0; t<mOptions->thread; t++){
-        threads[t] = new std::thread(std::bind(&PairEndProcessor::consumerTask, this, configs[t]));
-    }
+    // std::thread** threads = new thread*[mOptions->thread];
+    // for(int t=0; t<mOptions->thread; t++){
+    //     threads[t] = new std::thread(std::bind(&PairEndProcessor::consumerTask, this, configs[t]));
+    // }
+    PairEndProcessor::consumerTask(configs[0]);
 
-    std::thread* leftWriterThread = NULL;
-    std::thread* rightWriterThread = NULL;
-    std::thread* unpairedLeftWriterThread = NULL;
-    std::thread* unpairedRightWriterThread = NULL;
-    std::thread* mergedWriterThread = NULL;
-    std::thread* failedWriterThread = NULL;
+    // std::thread* leftWriterThread = NULL;
+    // std::thread* rightWriterThread = NULL;
+    // std::thread* unpairedLeftWriterThread = NULL;
+    // std::thread* unpairedRightWriterThread = NULL;
+    // std::thread* mergedWriterThread = NULL;
+    // std::thread* failedWriterThread = NULL;
     if(mLeftWriter)
-        leftWriterThread = new std::thread(std::bind(&PairEndProcessor::writeTask, this, mLeftWriter));
+        // leftWriterThread = new std::thread(std::bind(&PairEndProcessor::writeTask, this, mLeftWriter));
+        PairEndProcessor::writeTask(mLeftWriter);
     if(mRightWriter)
-        rightWriterThread = new std::thread(std::bind(&PairEndProcessor::writeTask, this, mRightWriter));
+        // rightWriterThread = new std::thread(std::bind(&PairEndProcessor::writeTask, this, mRightWriter));
+        PairEndProcessor::writeTask(mRightWriter);
     if(mUnpairedLeftWriter)
-        unpairedLeftWriterThread = new std::thread(std::bind(&PairEndProcessor::writeTask, this, mUnpairedLeftWriter));
+        // unpairedLeftWriterThread = new std::thread(std::bind(&PairEndProcessor::writeTask, this, mUnpairedLeftWriter));
+        PairEndProcessor::writeTask(mUnpairedLeftWriter);
     if(mUnpairedRightWriter)
-        unpairedRightWriterThread = new std::thread(std::bind(&PairEndProcessor::writeTask, this, mUnpairedRightWriter));
+        // unpairedRightWriterThread = new std::thread(std::bind(&PairEndProcessor::writeTask, this, mUnpairedRightWriter));
+        PairEndProcessor::writeTask(mUnpairedRightWriter);
     if(mMergedWriter)
-        mergedWriterThread = new std::thread(std::bind(&PairEndProcessor::writeTask, this, mMergedWriter));
+        // mergedWriterThread = new std::thread(std::bind(&PairEndProcessor::writeTask, this, mMergedWriter));
+        PairEndProcessor::writeTask(mMergedWriter);
     if(mFailedWriter)
-        failedWriterThread = new std::thread(std::bind(&PairEndProcessor::writeTask, this, mFailedWriter));
-
-    producer.join();
-    for(int t=0; t<mOptions->thread; t++){
-        threads[t]->join();
-    }
-
-    if(!mOptions->split.enabled) {
-        if(leftWriterThread)
-            leftWriterThread->join();
-        if(rightWriterThread)
-            rightWriterThread->join();
-        if(unpairedLeftWriterThread)
-            unpairedLeftWriterThread->join();
-        if(unpairedRightWriterThread)
-            unpairedRightWriterThread->join();
-        if(mergedWriterThread)
-            mergedWriterThread->join();
-        if(failedWriterThread)
-            failedWriterThread->join();
-    }
+        // failedWriterThread = new std::thread(std::bind(&PairEndProcessor::writeTask, this, mFailedWriter));
+        PairEndProcessor::writeTask(mFailedWriter);
+
+    // producer.join();
+    // for(int t=0; t<mOptions->thread; t++){
+    //     threads[t]->join();
+    // }
+
+    // if(!mOptions->split.enabled) {
+    //     if(leftWriterThread)
+    //         leftWriterThread->join();
+    //     if(rightWriterThread)
+    //         rightWriterThread->join();
+    //     if(unpairedLeftWriterThread)
+    //         unpairedLeftWriterThread->join();
+    //     if(unpairedRightWriterThread)
+    //         unpairedRightWriterThread->join();
+    //     if(mergedWriterThread)
+    //         mergedWriterThread->join();
+    //     if(failedWriterThread)
+    //         failedWriterThread->join();
+    // }
 
     if(mOptions->verbose)
         loginfo("start to generate reports\n");
@@ -253,8 +262,8 @@ bool PairEndProcessor::process(){
 
     // clean up
     for(int t=0; t<mOptions->thread; t++){
-        delete threads[t];
-        threads[t] = NULL;
+        // delete threads[t];
+        // threads[t] = NULL;
         delete configs[t];
         configs[t] = NULL;
     }
@@ -270,7 +279,7 @@ bool PairEndProcessor::process(){
         delete[] dupMeanGC;
     }
 
-    delete[] threads;
+    // delete[] threads;
     delete[] configs;
 
     if(leftWriterThread)
@@ -818,14 +827,14 @@ void PairEndProcessor::consumerTask(ThreadConfig* config)
 
 void PairEndProcessor::writeTask(WriterThread* config)
 {
-    while(true) {
-        if(config->isCompleted()){
-            // last check for possible threading related issue
-            config->output();
-            break;
-        }
+    // while(true) {
+    //     if(config->isCompleted()){
+    //         // last check for possible threading related issue
+    //         config->output();
+    //         break;
+    //     }
         config->output();
-    }
+    // }
 
     if(mOptions->verbose) {
         string msg = config->getFilename() + " writer finished";
diff --git a/src/seprocessor.cpp b/src/seprocessor.cpp
index a9c968f..5f342cf 100644
--- a/src/seprocessor.cpp
+++ b/src/seprocessor.cpp
@@ -69,39 +69,44 @@ bool SingleEndProcessor::process(){
         initOutput();
 
     initPackRepository();
-    std::thread producer(std::bind(&SingleEndProcessor::producerTask, this));
+    // std::thread producer(std::bind(&SingleEndProcessor::producerTask, this));
+    SingleEndProcessor::producerTask();
 
     //TODO: get the correct cycles
     int cycle = 151;
+    mOptions->thread = 1;
     ThreadConfig** configs = new ThreadConfig*[mOptions->thread];
     for(int t=0; t<mOptions->thread; t++){
         configs[t] = new ThreadConfig(mOptions, t, false);
         initConfig(configs[t]);
     }
 
-    std::thread** threads = new thread*[mOptions->thread];
-    for(int t=0; t<mOptions->thread; t++){
-        threads[t] = new std::thread(std::bind(&SingleEndProcessor::consumerTask, this, configs[t]));
-    }
+    // std::thread** threads = new thread*[mOptions->thread];
+    // for(int t=0; t<mOptions->thread; t++){
+    //     threads[t] = new std::thread(std::bind(&SingleEndProcessor::consumerTask, this, configs[t]));
+    // }
+    SingleEndProcessor::consumerTask(configs[0]);
 
-    std::thread* leftWriterThread = NULL;
-    std::thread* failedWriterThread = NULL;
+    // std::thread* leftWriterThread = NULL;
+    // std::thread* failedWriterThread = NULL;
     if(mLeftWriter)
-        leftWriterThread = new std::thread(std::bind(&SingleEndProcessor::writeTask, this, mLeftWriter));
+        // leftWriterThread = new std::thread(std::bind(&SingleEndProcessor::writeTask, this, mLeftWriter));
+        SingleEndProcessor::writeTask(mLeftWriter);
     if(mFailedWriter)
-        failedWriterThread = new std::thread(std::bind(&SingleEndProcessor::writeTask, this, mFailedWriter));
+        // failedWriterThread = new std::thread(std::bind(&SingleEndProcessor::writeTask, this, mFailedWriter));
+        SingleEndProcessor::writeTask(mFailedWriter);
 
-    producer.join();
-    for(int t=0; t<mOptions->thread; t++){
-        threads[t]->join();
-    }
+    // producer.join();
+    // for(int t=0; t<mOptions->thread; t++){
+    //     threads[t]->join();
+    // }
 
-    if(!mOptions->split.enabled) {
-        if(leftWriterThread)
-            leftWriterThread->join();
-        if(failedWriterThread)
-            failedWriterThread->join();
-    }
+    // if(!mOptions->split.enabled) {
+    //     if(leftWriterThread)
+    //         leftWriterThread->join();
+    //     if(failedWriterThread)
+    //         failedWriterThread->join();
+    // }
 
     if(mOptions->verbose)
         loginfo("start to generate reports\n");
@@ -161,8 +166,8 @@ bool SingleEndProcessor::process(){
 
     // clean up
     for(int t=0; t<mOptions->thread; t++){
-        delete threads[t];
-        threads[t] = NULL;
+        // delete threads[t];
+        // threads[t] = NULL;
         delete configs[t];
         configs[t] = NULL;
     }
@@ -176,7 +181,7 @@ bool SingleEndProcessor::process(){
         delete[] dupMeanGC;
     }
 
-    delete[] threads;
+    // delete[] threads;
     delete[] configs;
 
     if(leftWriterThread)
@@ -514,14 +519,14 @@ void SingleEndProcessor::consumerTask(ThreadConfig* config)
 
 void SingleEndProcessor::writeTask(WriterThread* config)
 {
-    while(true) {
-        if(config->isCompleted()){
-            // last check for possible threading related issue
-            config->output();
-            break;
-        }
+    // while(true) {
+    //     if(config->isCompleted()){
+    //         // last check for possible threading related issue
+    //         config->output();
+    //         break;
+    //     }
         config->output();
-    }
+    // }
 
     if(mOptions->verbose) {
         string msg = config->getFilename() + " writer finished";
